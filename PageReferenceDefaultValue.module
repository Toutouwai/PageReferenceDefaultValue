<?php namespace ProcessWire;

class PageReferenceDefaultValue extends WireData implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Page Reference Default Value',
			'summary' => "Allows a default value to be defined for certain Page Reference inputfield types that don't already support a default value.",
			'version' => '0.1.0',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/PageReferenceDefaultValue',
			'icon' => 'caret-square-o-right',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.137, PHP>=5.4.0',
		);
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('InputfieldPage::render', $this, 'checkDefaultValue');
		$this->addHookAfter('InputfieldPage::processInput', $this, 'checkDefaultValue');
		$this->addHookAfter('InputfieldPage::getConfigInputfields', $this, 'addConfigInputfields');
	}

	/**
	 * Check for default value and populate when appropriate
	 *
	 */
	protected function checkDefaultValue(HookEvent $event) {
		/** @var InputfieldPage $if */
		$if = $event->object;
		$inputfield = $if->getInputfield();
		$default_value = $this->getDefaultValue($inputfield);
		if(!$inputfield->required || !$default_value || !$inputfield->isEmpty()) return;
		$inputfield->value = $default_value;
	}

	/**
	 * Add default value inputfield to config
	 *
	 */
	protected function addConfigInputfields(HookEvent $event) {
		/** @var InputfieldPage $if */
		$if = $event->object;
		/** @var InputfieldWrapper $wrapper */
		$wrapper = $event->return;
		$inputfield = $if->getInputfield();
		if(!$this->isSupportedInputfield($inputfield)) return;
		// Get inputfield to insert after
		$insert_after = $wrapper->getChildByName('inputfield');
		// Default value inputfield
		if($this->isMultiple($inputfield)) {
			$f = $this->wire('modules')->get('InputfieldPageListSelectMultiple');
			$f->description = $this->_('To have pre-selected default values, select the pages below.');
		} else {
			$f = $this->wire('modules')->get('InputfieldPageListSelect');
			$f->description = $this->_('To have a pre-selected default value, select the page below.');
		}
		$f->attr('name', 'defaultValue');
		$f->label = $this->_('Default value');
		$f->notes = $this->_('IMPORTANT: The default value is not used unless the field is required (see the “required” checkbox on this screen).');
		$f->icon = 'caret-square-o-right';
		$f->parent_id = $if->parent_id;
		$f->value = $this->getDefaultValue($inputfield);
		$f->collapsed = Inputfield::collapsedBlank;
		$wrapper->insertAfter($f, $insert_after);
	}

	/**
	 * Is this an inputfield type that's supported by this module?
	 *
	 * @param Inputfield $inputfield
	 * @return bool
	 */
	protected function isSupportedInputfield(Inputfield $inputfield) {
		$supported = [
			'InputfieldPageListSelect',
			'InputfieldPageListSelectMultiple',
			'InputfieldPageAutocomplete',
		];
		return in_array($inputfield->className, $supported);
	}

	/**
	 * Is this a "multiple" inputfield type?
	 *
	 * @param Inputfield $inputfield
	 * @return bool
	 */
	protected function isMultiple(Inputfield $inputfield) {
		if($inputfield->className === 'InputfieldPageAutocomplete') {
			/** @var InputfieldPageAutocomplete $inputfield */
			return $inputfield->maxSelectedItems !== 1;
		} else {
			return $inputfield instanceof InputfieldHasArrayValue;
		}
	}

	/**
	 * Get the default value of the inputfield if any
	 *
	 * @param Inputfield $inputfield
	 * @return array|mixed
	 */
	protected function getDefaultValue(Inputfield $inputfield) {
		$default_value = $inputfield->defaultValue;
		if($this->isMultiple($inputfield)) {
			if(!$default_value) $default_value = [];
		} else {
			if(is_array($default_value)) {
				$default_value = reset($default_value);
			}
		}
		return $default_value;
	}

}
